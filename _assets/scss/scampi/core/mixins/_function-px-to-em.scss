// Fonctions px-to-em
// =======================================================================
//
// Source: https://gist.github.com/isellsoap/8299726
// Adaptation pour Scampi :
//    * rename mixin and variable to avoid conflicts with other libs
//    * add unitless values ; use case: sc-em(23px) or sc-em(23)

// Calculates em values for a given list of (px or em) values and a given em
// base. Multiply base values for nested em structures (last @usage example).
// @usage: sc-em(10px, 1.125) => .55556em
//         sc-em(24px, .875em) => 1.71429em
//         sc-em(12px 0 7em rgba(0, 0, 0, .7), 1.75) => .42857em 0 4em rgba(0, 0, 0, 0.7)
//         sc-em(12px) + sc-em(3em) => 3.75em
//         sc-em(23px, sc-em(53px)) => .43396em
//         sc-em(24px, 1.5 * 1.125) => .88889em


$px-base: 16px !default;

// Strips the unit from a given number-unit-combination and returns the number.
@function parse-int($number) {
  @return $number / ($number * 0 + 1);
}

// Simply adds the em unit to a given number. This is used twice in the
// function underneath, thus the need for a separate function.
@function add-em-unit($number) {
  @return $number * 1em;
}

// px to em function
@function sc-em($values, $em-base: 1) {
  $px-base: parse-int($px-base);
  $em-base: parse-int($em-base);
  $result: ();

  @each $value in $values {
    @if $value == 0 or type-of($value) != "number" {
      $result: append($result, $value);
    } @else {
      $unit: unit($value);
      $value: parse-int($value);

      @if ($unit == "px" or $unit == "") {
        $result: append($result, add-em-unit($value / ($px-base * $em-base)));
      } @else if $unit == "em" {
        $result: append($result, add-em-unit($value / $em-base));
      }
    }
  }

  // If only one value is provided, output the instance of that object instead
  // of the whole list. This enables use cases like nested function invocations
  // (e.g. `sc-em(2px, em(15px))`) or additions/subtractions (e.g. `sc-em(5px) + sc-em(32px)`).

  @if length($result) == 1 {
    @return nth($result, 1);
  } @else {
    @return $result;
  }
}




// =======================================================================
// DEV NOTES
// =======================================================================

// ancien mixin pour m√©moire
// // strip-units

// @function strip-units($number) {
//   @return $number / ($number * 0 + 1);
// }

// // Convert pixels to ems
// // eg. for a relational value of 12px write em(12) when the parent is 16px
// // if the parent is another value say 24px write em(12, 24)

// $em-base: 16px !default;

// @function sc-em($pxval, $base: $em-base) {
//   @if not unitless($pxval) {
//       $pxval: strip-units($pxval);
//   }
//   @if not unitless($base) {
//       $base: strip-units($base);
//   }
//   @return ($pxval / $base) * 1em;
// }

// =======================================================================
